--------------------------------------------------------------------------------
      name:  master
       log:  C:\Users\aet816\Documents\Research_v2\logs/master_2025-09-08.log
  log type:  text
 opened on:   8 Sep 2025, 20:02:14

. 
. * 3) Utilities
. do "code/00_utils.do"

. *******************************************************
. * 00_utils.do — Utility programs (e.g., _coerce_num)
. *******************************************************
. version 17

. 
. * Coerce variables to numeric when they arrive as strings.
. * - Handles "yes/no", "oui/non", "0/1/2" numeric strings, commas
. cap program drop _coerce_num

. program define _coerce_num
  1.     syntax varlist
  2.     foreach v of local varlist {
  3.         capture confirm numeric variable `v'
  4.         if _rc {
  5.             * Attempt to destring first (ignore commas/spaces)
.             capture destring `v', replace ignore(", ")
  6.             if _rc {
  7.                 * If still not numeric, map common text to numbers
.                 gen double __tmp_num = .
  8.                 replace __tmp_num = 1 if lower(trim(`v'))=="yes" | lower(tr
> im(`v'))=="oui" | trim(`v')=="1"
  9.                 replace __tmp_num = 0 if lower(trim(`v'))=="no"  | lower(tr
> im(`v'))=="non" | trim(`v')=="0"
 10.                 replace __tmp_num = real(`v') if missing(__tmp_num) & regex
> m(`v',"^-?[0-9.]+$")
 11.                 drop `v'
 12.                 rename __tmp_num `v'
 13.             }
 14.         }
 15.     }
 16. end

. 
end of do-file

. 
. * 4) Cleaning (read-only on input; writes a new cleaned file)
. cap noisily do "code/02_clean_bf.do"

. *******************************************************
. * 02_clean_bf.do — Prepare cleaned analytic copy (read-only input)
. *******************************************************
. version 17

. 
. * Load input into memory (we will NOT overwrite it on disk)
. use "$IN_ANALYTIC", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. 
. * --- Create a separate work frame and copy dataset into it ---
. cap frame drop work

. frame copy default work          // copies current data into NEW frame "work"

. frame change work

. 
. * Include utilities inside work frame
. do "code/00_utils.do"

. *******************************************************
. * 00_utils.do — Utility programs (e.g., _coerce_num)
. *******************************************************
. version 17

. 
. * Coerce variables to numeric when they arrive as strings.
. * - Handles "yes/no", "oui/non", "0/1/2" numeric strings, commas
. cap program drop _coerce_num

. program define _coerce_num
  1.     syntax varlist
  2.     foreach v of local varlist {
  3.         capture confirm numeric variable `v'
  4.         if _rc {
  5.             * Attempt to destring first (ignore commas/spaces)
.             capture destring `v', replace ignore(", ")
  6.             if _rc {
  7.                 * If still not numeric, map common text to numbers
.                 gen double __tmp_num = .
  8.                 replace __tmp_num = 1 if lower(trim(`v'))=="yes" | lower(tr
> im(`v'))=="oui" | trim(`v')=="1"
  9.                 replace __tmp_num = 0 if lower(trim(`v'))=="no"  | lower(tr
> im(`v'))=="non" | trim(`v')=="0"
 10.                 replace __tmp_num = real(`v') if missing(__tmp_num) & regex
> m(`v',"^-?[0-9.]+$")
 11.                 drop `v'
 12.                 rename __tmp_num `v'
 13.             }
 14.         }
 15.     }
 16. end

. 
end of do-file

. 
. * ---- Modality (0=F2F, 1=Remote); derive only inside work frame ----
. cap confirm var Modality_Type

. if _rc {
.     cap confirm var Modality
.     if !_rc {
.         _coerce_num Modality
.         gen byte Modality_Type = Modality
.     }
. }

. label define modlbl 0 "F2F" 1 "Remote", replace

. cap label values Modality_Type modlbl

. 
. * ---------- Admin1 English label (robust) — work frame only ----------
. capture confirm var admin1_en

. if _rc {
.     * Try plausible admin1 variables; else create empty placeholder
.     local admin_candidates admin1 admin1_name admin1_en_s ADMIN1_EN ADMIN1 reg
> ion_en region Region
.     local found ""
.     foreach v of local admin_candidates {
  2.         capture confirm var `v'
  3.         if !_rc {
  4.             local found "`v'"
  5.             continue, break
  6.         }
  7.     }
.     if "`found'" != "" {
.         clonevar admin1_en = `found'
.     }
.     else {
.         gen str40 admin1_en = ""
.     }
. }

. label var admin1_en "Region (Admin1, EN)"

. 
. * Save a CLEANED analytic copy to a NEW file (original input untouched)
. save "$OUT_CLEAN", replace
file data/clean/bf_analytic_cleaned.dta saved

. 
. * Return to default frame; clean up
. frame change default

. cap frame drop work

. 
end of do-file

. if _rc { di as err "ERROR in 02_clean_bf.do (rc=" %9.0g _rc ")"; log close mas
> ter; exit _rc }
. 
. * 5) Construct indices (on cleaned copy; writes another new file)
. cap noisily do "code/03_construct_indices.do"
. if _rc { di as err "ERROR in 03_construct_indices.do (rc=" %9.0g _rc ")"; log 
> close master; exit _rc }
. 
. * 6) Analysis checks (console sanity)
. cap noisily do "code/04_analysis.do"
. if _rc { di as err "ERROR in 04_analysis.do (rc=" %9.0g _rc ")"; log close mas
> ter; exit _rc }
. 
. * 7) Tables (unweighted + weighted)
. cap noisily do "code/05_tables.do"
. if _rc { di as err "ERROR in 05_tables.do (rc=" %9.0g _rc ")"; log close maste
> r; exit _rc }
. 
. * ===== NEW: per professor's guide / Abate links =====
. * 8) Balance tables (Tables 20–22)
. cap noisily do "code/06_balance.do"
. 
. * 9) Composite indicators (CARI / rCARI) — Table 3
. cap noisily do "code/07_composites.do"
. 
. * 10) Individual indicators (means/SD/ttest + regressions) — Table 4
. cap noisily do "code/08_indicators.do"
. 
. * 11) Heterogeneity — Table 5
. cap noisily do "code/09_heterogeneity.do"
. 
. * 12) Quality checks (nonresponse, heaping, Benford; enumerator-ready inputs)
. cap noisily do "code/10_quality_checks.do"
. 
. * 13) Enumerator effects & robustness (FE; leave-one-out)
. cap noisily do "code/11_enumerator_robustness.do"
. 
. * 14) Module length tests (short vs long FCS/FES) — Tables 11–15
. cap noisily do "code/12_module_length.do"
. 
. * 15) Alternative LCS specs (LCS-FS vs LCS-EN) — Tables 16–19
. cap noisily do "code/13_lcs_variants.do"
. 
. di as res "Pipeline completed (input .dta untouched)."
. log close master
. program error:  matching close brace not found
r(198);

end of do-file

r(198);
. cd "C:\Users\aet816\Documents\Research_v2"
C:\Users\aet816\Documents\Research_v2

. 
. do "code/06_balance.do"

. *******************************************************
. * 06_balance.do — Baseline balance by modality (Tables 20–22)
. * - Uses LISTING_IN dataset (or IN_ANALYTIC if LISTING not set)
. * - Unweighted t-tests by modality
. * - (Optional) Weighted regressions of each baseline var on modality
. *   with robust SEs (cluster at $CLUSTVAR if provided)
. * - Exports to OUT_XLSX: sheets Balance_unw, Balance_wt
. *******************************************************
. version 17

. set more off

. 
. * Pick data: listing-phase if available, else analytic
. capture confirm file "$LISTING_IN"

. if _rc use "$IN_ANALYTIC", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. else     use "$LISTING_IN", clear

. 
. * Ensure modality exists and is labeled
. capture confirm var $MODE

. if _rc {
.     di as err "06_balance: MODE ($MODE) not found. Skipping balance."
.     exit
. }

. 
. label values $MODE modlbl

. 
. * Build list of baseline vars that actually exist
. local basevars

. foreach v of global BAL_VARS {
  2.     cap confirm var `v'
  3.     if !_rc local basevars `basevars' `v'
  4. }

. if "`basevars'"=="" {
.     di as err "06_balance: None of BAL_VARS found. Skipping."
06_balance: None of BAL_VARS found. Skipping.
.     exit

end of do-file


. 
. do "code/07_composites.do"

. *******************************************************
. * 07_composites.do — Composite indices vs modality (Table 3)
. * - Tries to use prebuilt CARI/rCARI if provided in config
. * - Otherwise attempts minimal construction from FES/LCS/Income pieces if pres
> ent
. * - Runs regressions: composite = α + β Phone + controls (optional)
. * - Weighted and unweighted versions; robust SEs (cluster at $CLUSTVAR if set)
. * - Exports to OUT_XLSX: Sheet "Comp_Reg" (unw) and "Comp_Reg_wt" (wt)
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc {
.     di as err "07_composites: MODE ($MODE) not found. Skipping."
.     exit
. }

. label values $MODE modlbl

. 
. * ---- 1) Ensure we have composite variables or try to build lightweight proxi
> es ----
. local composites

. cap confirm var $CARI_VAR

. if !_rc local composites `composites' $CARI_VAR

. cap confirm var $rCARI_VAR

. if !_rc local composites `composites' $rCARI_VAR

. 
. * Attempt simple FES proxy if FES missing but NUM/DEN exist
. cap confirm var $FES_VAR

. if _rc & "$FES_NUM"!="" & "$FES_DEN"!="" {
.     cap confirm var $FES_NUM
.     cap confirm var $FES_DEN
.     if !_rc {
.         gen double __fes = 100 * ( `=$FES_NUM' / `=$FES_DEN' )
.         label var __fes "FES (%) (constructed)"
.         local FES_here "__fes"
.     }
. }

. else if !_rc {
.     local FES_here "$FES_VAR"
. }

. 
. * If you store a reduced CARI for Remote as a z-combo (example), you can wire 
> it here.
. * For now, we will use whatever you set in $CARI_VAR / $rCARI_VAR if available
> .
. if "`composites'"=="" {
.     di as txt "07_composites: No CARI/rCARI variables supplied; looking for FE
> S/LCS/Income to regress separately."
07_composites: No CARI/rCARI variables supplied; looking for FES/LCS/Income to r
> egress separately.
. }

. 
. * ---- 2) Controls (optional): use heterogeneity set as controls if desired --
> --
. local controls ""

. foreach c of global HETE_VARS {
  2.     cap confirm var `c'
  3.     if !_rc local controls `controls' `c'
  4. }

. 
. * Helper: regression and post to table
. program drop _post_regress
program _post_regress not found
r(111);

end of do-file

r(111);

. 
. do "code/08_indicators.do"

. *******************************************************
. * 08_indicators.do — Individual indicators by modality (Table 4)
. * - Indicators: FCS, rCSI, HHS (+ optional LCS/FES/Income if present)
. * - Outputs:
. *   • Ind_Means_Ttests (unweighted means/SDs + t-tests; Phone–F2F diff)
. *   • Ind_Reg (unweighted regression β on Phone)
. *   • Ind_Reg_wt (weighted regression β on Phone, if $WGT)
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc {
.     di as err "08_indicators: MODE not found. Skipping."
.     exit
. }

. label values $MODE modlbl

. 
. * Build indicator list
. local indlist

. foreach v in FCS rCSI HHS {
  2.     cap confirm var `v'
  3.     if !_rc local indlist `indlist' `v'
  4. }

. * Optional: LCS composite, FES, income vars if present
. foreach v in $LCS_CRI_VAR $FES_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local indlist `indlist' `v'
  5. }

. 
. if "`indlist'"=="" {
.     di as err "08_indicators: No indicators found."
.     exit
. }

. 
. * ===== A) Unweighted means/SDs + t-tests =====
. preserve

. tempname mem

. postfile `mem' str20 varname double mean_f2f sd_f2f mean_ph sd_ph diff tstat p
> val using "`c(tmpdir)'/ind_t.dta", replace
(file C:\Users\aet816\AppData\Local\Temp\7//ind_t.dta not found)

. levelsof $MODE, local(modes)
0 1

. foreach y of local indlist {
  2.     bysort $MODE: summarize `y'
  3.     * group stats
.     quietly summarize `y' if $MODE==0
  4.     local mf = r(mean)
  5.     local sf = r(sd)
  6.     quietly summarize `y' if $MODE==1
  7.     local mp = r(mean)
  8.     local sp = r(sd)
  9.     quietly ttest `y', by($MODE)
 10.     post `mem' ("`y'") (`mf') (`sf') (`mp') (`sp') (r(mu_2)-r(mu_1)) (r(t))
>  (r(p))
 11. }

--------------------------------------------------------------------------------
-> Modality_Type = F2F

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
         FCS |      1,863    26.26087    10.65401        3.5         90

--------------------------------------------------------------------------------
-> Modality_Type = Remote

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
         FCS |      1,019    27.15407    9.076882         14         96

variable __000001 already defined
r(110);

end of do-file

r(110);

. 
. do "code/09_heterogeneity.do"

. *******************************************************
. * 09_heterogeneity.do — Modality interactions (Table 5)
. * - For each indicator y in (FCS rCSI HHS + optional others), run:
. *   y = α + β Phone + γ (X) + δ (Phone×X) + controls + e
. * - Outputs: Hete_Reg (unweighted) and Hete_Reg_wt (weighted, if $WGT)
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc {
.     di as err "09_heterogeneity: MODE not found. Skipping."
.     exit
. }

. label values $MODE modlbl

. 
. * Indicators set
. local indlist

. foreach v in FCS rCSI HHS {
  2.     cap confirm var `v'
  3.     if !_rc local indlist `indlist' `v'
  4. }

. foreach v in $LCS_CRI_VAR $FES_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local indlist `indlist' `v'
  5. }

. if "`indlist'"=="" exit

. 
. * Heterogeneity variables
. local hetes

. foreach h of global HETE_VARS {
  2.     cap confirm var `h'
  3.     if !_rc local hetes `hetes' `h'
  4. }

. if "`hetes'"=="" {
.     di as txt "09_heterogeneity: No HETE_VARS found. Skipping."
09_heterogeneity: No HETE_VARS found. Skipping.
.     exit

end of do-file


. 
. do "code/10_quality_checks.do"

. *******************************************************
. * 10_quality_checks.do — Data quality checks by modality
. * - Item nonresponse: share missing by var and modality
. * - Heaping: share ending in 0 or 5 for selected numeric vars
. * - Benford (first digit) distance: for selected vars (if positive, multi-digi
> t)
. * - Exports: Quality_Nonresp, Quality_Heaping, Quality_Benford
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc {
.     di as err "10_quality_checks: MODE not found. Skipping."
.     exit
. }

. label values $MODE modlbl

. 
. * ===== A) Item nonresponse =====
. * Choose vars to evaluate: all indicators & key modules if present
. local qvars

. foreach v in FCS rCSI HHS $FES_VAR $LCS_CRI_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local qvars `qvars' `v'
  5. }

. if "`qvars'"!="" {
.     preserve
.     tempname mem
.     postfile `mem' str20 varname double miss_f2f miss_ph using "`c(tmpdir)'/q_
> miss.dta", replace
(file C:\Users\aet816\AppData\Local\Temp\7//q_miss.dta not found)
.     foreach v of local qvars {
  2.         quietly mean missing = missing(`v'), over($MODE)
  3.         * Means table stores means of indicator "missing" by group
.         matrix M = r(table)
  4.         * Columns: group levels order; we assume 0 then 1
.         local m0 = M[1,1]
  5.         local m1 = M[1,2]
  6.         post `mem' ("`v'") (100*`m0') (100*`m1')
  7.     }
invalid syntax
r(198);
.     postclose `mem'
.     use "`c(tmpdir)'/q_miss.dta", clear
.     export excel using "$OUT_XLSX", sheet("Quality_Nonresp") firstrow(variable
> s) sheetreplace
.     restore
. }
r(198);

end of do-file

r(198);

. 
. do "code/11_enumerator_robustness.do"

. *******************************************************
. * 11_enumerator_robustness.do — Enumerator FE & leave-one-out
. * - Outcome set: FCS rCSI HHS (extend as needed)
. * - FE spec: y = α + β Phone + i.enumerator + controls
. * - Leave-one-out: re-estimate β after dropping each enumerator
. * - Exports: Enumerator_FE, Enumerator_LOEO
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc { di as err "11_enumerator: MODE not found."; exit }
. label values $MODE modlbl
. 
. cap confirm var $ENUM_ID
. if _rc {
.     di as txt "11_enumerator: ENUM_ID not set; skipping."
.     exit
. }
. 
. local outcomes
. foreach y in FCS rCSI HHS {
  2.     cap confirm var `y'
  3.     if !_rc local outcomes `outcomes' `y'
  4. }
. if "`outcomes'"=="" exit
. 
. * Controls (optional)
. local controls ""
. foreach c of global HETE_VARS {
  2.     cap confirm var `c'
  3.     if !_rc local controls `controls' `c'
  4. }
. 
. * ===== A) FE regressions (unweighted & weighted if weight exists) =====
. tempname mem
. postfile `mem' str8 outcome double beta_phone se t pval N using "`c(tmpdir)'/e
> num_fe.dta", replace
. local vceopt ""
. if "$CLUSTVAR"!="" {
.     cap confirm var $CLUSTVAR
.     if !_rc local vceopt "vce(cluster $CLUSTVAR)"
. }
. foreach y of local outcomes {
  2.     cap noi regress `y' i.$MODE `controls' i.$ENUM_ID, robust `vceopt'
  3.     if _rc continue
  4.     matrix b = e(b)
  5.     matrix V = e(V)
  6.     local N = e(N)
  7.     local beta = b[1,"1.$MODE"]
  8.     local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
  9.     local t    = `beta'/`se'
 10.     local p    = 2*ttail(e(df_r),abs(`t'))
 11.     post `mem' ("`y'") (`beta') (`se') (`t') (`p') (`N')
 12. }
. postclose `mem'
. use "`c(tmpdir)'/enum_fe.dta", clear
. export excel using "$OUT_XLSX", sheet("Enumerator_FE") firstrow(variables) she
> etreplace
. 
. * Weighted FE (if available)
. cap confirm var $WGT
. if _rc exit
. tempname memw
. postfile `memw' str8 outcome double beta_phone se t pval N using "`c(tmpdir)'/
> enum_few.dta", replace
. foreach y of local outcomes {
  2.     cap noi regress `y' i.$MODE `controls' i.$ENUM_ID [pw=$WGT], robust `vc
> eopt'
  3.     if _rc continue
  4.     matrix b = e(b)
  5.     matrix V = e(V)
  6.     local N = e(N)
  7.     local beta = b[1,"1.$MODE"]
  8.     local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
  9.     local t    = `beta'/`se'
 10.     local p    = 2*ttail(e(df_r),abs(`t'))
 11.     post `memw' ("`y'") (`beta') (`se') (`t') (`p') (`N')
 12. }
. postclose `memw'
. use "`c(tmpdir)'/enum_few.dta", clear
. export excel using "$OUT_XLSX", sheet("Enumerator_FE_wt") firstrow(variables) 
> sheetreplace
. 
. * ===== B) Leave-one-enumerator-out (LOEO) for each outcome =====
. preserve
. tempname meml
. postfile `meml' str8 outcome str12 enum_id double beta_phone se using "`c(tmpd
> ir)'/enum_loeo.dta", replace
. levelsof $ENUM_ID, local(enums)
. foreach y of local outcomes {
  2.     foreach e of local enums {
  3.         preserve
  4.         keep if $ENUM_ID != `e'
  5.         cap noi regress `y' i.$MODE `controls' i.$ENUM_ID, robust `vceopt'
  6.         if _rc { restore; continue }
  7.         matrix b = e(b)
  8.         matrix V = e(V)
  9.         local beta = b[1,"1.$MODE"]
 10.         local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
 11.         post `meml' ("`y'") ("`e'") (`beta') (`se')
 12.         restore
 13.     }
 14. }
. postclose `meml'
. use "`c(tmpdir)'/enum_loeo.dta", clear
. export excel using "$OUT_XLSX", sheet("Enumerator_LOEO") firstrow(variables) s
> heetreplace
. restore
. program error:  matching close brace not found
r(198);

end of do-file

r(198);
. 
. do "code/12_module_length.do"

. *******************************************************
. * 12_module_length.do — Short vs Long module comparisons (F2F)
. * - Requires variables for long/short versions (set globals below)
. * - Prefers paired t-tests if same HH observed; else unpaired by F2F subset
. * - Exports: ModuleLen_FCS, ModuleLen_FES
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. 
. * Only F2F
. capture confirm var $MODE

. if _rc exit

. keep if $MODE==0
(1,019 observations deleted)

. 
. * EDIT THESE to your variable names for short/long versions
. * If absent, script will skip gracefully.
. global FCS_LONG "FCS_long"

. global FCS_SHORT "FCS_short"

. global FES_LONG "FES_long"

. global FES_SHORT "FES_short"

. 
. * Household ID to do paired tests (if available)
. global HHID "household_id"

. 
. local pairs "FCS FES"

. foreach p of local pairs {
  2.     local L : global `p'_LONG
  3.     local S : global `p'_SHORT
  4.     if "`L'"=="" | "`S'"=="" continue
  5.     cap confirm var `L'
  6.     cap confirm var `S'
  7.     if _rc continue
  8. 
.     * Prefer paired if HHID exists and both values present within HH
.     local paired 0
  9.     cap confirm var $HHID
 10.     if !_rc {
 11.         bysort $HHID: gen byte __both = !missing(`L') & !missing(`S')
 12.         count if __both==1
 13.         if r(N)>0 local paired 1
 14.     }
 15. 
.     preserve
 16.     if `paired' {
 17.         * Paired within HH
.         keep if __both==1
 18.         ttest `L' = `S'
 19.         postfile _mp str10 metric double mean_long mean_short diff tstat pv
> al using "`c(tmpdir)'/ml_`p'.dta", replace
 20.         quietly summarize `L'; local ml = r(mean)
 21.         quietly summarize `S'; local ms = r(mean)
 22.         post _mp ("`p'") (`ml') (`ms') (`ml'-`ms') (r(t)) (r(p))
 23.         postclose _mp
 24.     }
 25.     else {
 26.         * Unpaired within F2F sample
.         ttest `L' == `S'
 27.         postfile _mp str10 metric double mean_long mean_short diff tstat pv
> al using "`c(tmpdir)'/ml_`p'.dta", replace
 28.         quietly summarize `L'; local ml = r(mean)
 29.         quietly summarize `S'; local ms = r(mean)
 30.         post _mp ("`p'") (`ml') (`ms') (`ml'-`ms') (r(t)) (r(p))
 31.         postclose _mp
 32.     }
 33.     use "`c(tmpdir)'/ml_`p'.dta", clear
 34.     export excel using "$OUT_XLSX", sheet("ModuleLen_`p'") firstrow(variabl
> es) sheetreplace
 35.     restore
 36.     cap drop __both
 37. }
global not allowed
r(101);

end of do-file

r(101);

. 
. do "code/13_lcs_variants.do"
file code/13_lcs_variants.do not found
r(601);

. cd "C:\Users\aet816\Documents\Research_v2"
C:\Users\aet816\Documents\Research_v2

. 
. do "code/06_balance.do"

. *******************************************************
. * 06_balance.do — Baseline balance by modality (Tables 20–22)
. * - Uses LISTING_IN dataset (or IN_ANALYTIC if LISTING not set)
. * - Unweighted t-tests by modality
. * - (Optional) Weighted regressions of each baseline var on modality
. *   with robust SEs (cluster at $CLUSTVAR if provided)
. * - Exports to OUT_XLSX: sheets Balance_unw, Balance_wt
. *******************************************************
. version 17

. set more off

. 
. * Pick data: listing-phase if available, else analytic
. capture confirm file "$LISTING_IN"

. if _rc use "$IN_ANALYTIC", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. else     use "$LISTING_IN", clear

. 
. * Ensure modality exists and is labeled
. capture confirm var $MODE

. if _rc {
.     di as err "06_balance: MODE ($MODE) not found. Skipping balance."
.     exit
. }

. 
. label values $MODE modlbl

. 
. * Build list of baseline vars that actually exist
. local basevars

. foreach v of global BAL_VARS {
  2.     cap confirm var `v'
  3.     if !_rc local basevars `basevars' `v'
  4. }

. if "`basevars'"=="" {
.     di as err "06_balance: None of BAL_VARS found. Skipping."
06_balance: None of BAL_VARS found. Skipping.
.     exit

end of do-file


. 
. do "code/07_composites.do"

. *******************************************************
. * 07_composites.do — Composite indices vs modality (Table 3)
. * - Uses $IN_FOR_TABLES and $MODE
. * - Regress y on Phone indicator (unweighted + weighted if $WGT)
. * - y ∈ {$CARI_VAR, $rCARI_VAR, FES proxy if needed}
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. cap confirm var $MODE

. if _rc exit

. label values $MODE modlbl

. 
. * Build list of outcomes
. local ylist

. foreach y in $CARI_VAR $rCARI_VAR {
  2.     if "`y'"=="" continue
  3.     cap confirm var `y'
  4.     if !_rc local ylist `ylist' `y'
  5. }

. 
. * FES: use $FES_VAR if present; else build simple % if NUM/DEN exist
. local FES_here

. cap confirm var $FES_VAR

. if !_rc local FES_here "$FES_VAR"

. else if "$FES_NUM"!="" & "$FES_DEN"!="" {
.     cap confirm var $FES_NUM
.     cap confirm var $FES_DEN
.     if !_rc {
.         tempvar __fes
.         gen double `__fes' = 100*(`=$FES_NUM'/`=$FES_DEN')
.         label var `__fes' "FES (%)"
.         local FES_here "`__fes'"
.     }
. }

. if "`FES_here'"!="" local ylist `ylist' `FES_here'

. if "`ylist'"=="" exit

. 
. * Optional controls
. local controls

. foreach c of global HETE_VARS {
  2.     cap confirm var `c'
  3.     if !_rc local controls `controls' `c'
  4. }

. 
. * Unweighted + weighted (if $WGT exists)
. tempname mem

. postfile `mem' str20 outcome str6 spec double beta se t p using ///
>     "`c(tmpdir)'/comp_reg.dta", replace
(file C:\Users\aet816\AppData\Local\Temp\7//comp_reg.dta not found)

. 
. foreach y of local ylist {
  2.     cap noi regress `y' i.$MODE `controls', robust
  3.     if !_rc {
  4.         matrix b = e(b)
  5.         matrix V = e(V)
  6.         local beta = b[1,"1.$MODE"]
  7.         local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
  8.         local t    = `beta'/`se'
  9.         local p    = 2*ttail(e(df_r),abs(`t'))
 10.         post `mem' ("`y'") ("unw") (`beta') (`se') (`t') (`p')
 11.     }
 12.     cap confirm var $WGT
 13.     if !_rc {
 14.         cap noi regress `y' i.$MODE `controls' [pw=$WGT], robust
 15.         if !_rc {
 16.             matrix b = e(b)
 17.             matrix V = e(V)
 18.             local beta = b[1,"1.$MODE"]
 19.             local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
 20.             local t    = `beta'/`se'
 21.             local p    = 2*ttail(e(df_r),abs(`t'))
 22.             post `mem' ("`y'") ("wt") (`beta') (`se') (`t') (`p')
 23.         }
 24.     }
 25. }

Linear regression                               Number of obs     =      2,882
                                                F(1, 2880)        =       2.39
                                                Prob > F          =     0.1224
                                                R-squared         =     0.0011
                                                Root MSE          =     .21558

-------------------------------------------------------------------------------
              |               Robust
          FES | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
Modality_Type |
      Remote  |  -.0148254   .0095932    -1.55   0.122    -.0336357    .0039848
        _cons |    .686734   .0039721   172.89   0.000     .6789456    .6945224
-------------------------------------------------------------------------------

. postclose `mem'

. use "`c(tmpdir)'/comp_reg.dta", clear

. export excel using "$OUT_XLSX", sheet("Comp_Reg") firstrow(variables) sheetrep
> lace
file output/tables/BF_tables.xlsx saved

. 
end of do-file

. 
. do "code/08_indicators.do"

. *******************************************************
. * 08_indicators.do — Individual indicators (Table 4)
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. cap confirm var $MODE

. if _rc exit

. label values $MODE modlbl

. 
. * Clean any leftover Stata temp names to avoid collisions
. cap drop __*

. 
. * Build indicator list
. local indlist

. foreach v in FCS rCSI HHS $LCS_CRI_VAR $FES_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local indlist `indlist' `v'
  5. }

. if "`indlist'"=="" exit

. 
. * A) Unweighted means/SD + t-tests
. preserve

. tempname mem

. postfile `mem' str20 varname double mean_f2f sd_f2f mean_ph sd_ph diff tstat p
> val ///
>     using "`c(tmpdir)'/ind_t.dta", replace

. foreach y of local indlist {
  2.     quietly summarize `y' if $MODE==0
  3.     local mf = r(mean)
  4.     local sf = r(sd)
  5.     quietly summarize `y' if $MODE==1
  6.     local mp = r(mean)
  7.     local sp = r(sd)
  8.     quietly ttest `y', by($MODE)
  9.     post `mem' ("`y'") (`mf') (`sf') (`mp') (`sp') (r(mu_2)-r(mu_1)) (r(t))
>  (r(p))
 10. }

. postclose `mem'

. use "`c(tmpdir)'/ind_t.dta", clear

. export excel using "$OUT_XLSX", sheet("Ind_Means_Ttests") firstrow(variables) 
> sheetreplace
file output/tables/BF_tables.xlsx saved

. restore

. 
. * B) Unweighted regressions on Phone
. tempname mem2

. postfile `mem2' str20 varname double beta se t p N using ///
>     "`c(tmpdir)'/ind_reg.dta", replace
(file C:\Users\aet816\AppData\Local\Temp\7//ind_reg.dta not found)

. foreach y of local indlist {
  2.     cap noi regress `y' i.$MODE, robust
  3.     if _rc continue
  4.     matrix b = e(b)
  5.     matrix V = e(V)
  6.     local N = e(N)
  7.     local beta = b[1,"1.$MODE"]
  8.     local se   = sqrt(V[rownumb(V,"1.$MODE"),rownumb(V,"1.$MODE")])
  9.     local t    = `beta'/`se'
 10.     local p    = 2*ttail(e(df_r),abs(`t'))
 11.     post `mem2' ("`y'") (`beta') (`se') (`t') (`p') (`N')
 12. }

Linear regression                               Number of obs     =      2,882
                                                F(1, 2880)        =       5.63
                                                Prob > F          =     0.0177
                                                R-squared         =     0.0018
                                                Root MSE          =     10.125

-------------------------------------------------------------------------------
              |               Robust
          FCS | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
Modality_Type |
      Remote  |   .8932031   .3765201     2.37   0.018     .1549269    1.631479
        _cons |   26.26087   .2468543   106.38   0.000     25.77684     26.7449
-------------------------------------------------------------------------------

Linear regression                               Number of obs     =      2,882
                                                F(1, 2880)        =      69.55
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0204
                                                Root MSE          =     9.4725

-------------------------------------------------------------------------------
              |               Robust
         rCSI | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
Modality_Type |
      Remote  |  -2.856383   .3424969    -8.34   0.000    -3.527947   -2.184819
        _cons |   9.716049    .237145    40.97   0.000     9.251058    10.18104
-------------------------------------------------------------------------------

Linear regression                               Number of obs     =      2,882
                                                F(1, 2880)        =      27.92
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0104
                                                Root MSE          =     1.0361

-------------------------------------------------------------------------------
              |               Robust
          HHS | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
Modality_Type |
      Remote  |   .2216923    .041956     5.28   0.000     .1394255    .3039591
        _cons |   .6468062   .0228165    28.35   0.000      .602068    .6915445
-------------------------------------------------------------------------------

Linear regression                               Number of obs     =      2,882
                                                F(1, 2880)        =       2.39
                                                Prob > F          =     0.1224
                                                R-squared         =     0.0011
                                                Root MSE          =     .21558

-------------------------------------------------------------------------------
              |               Robust
          FES | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
Modality_Type |
      Remote  |  -.0148254   .0095932    -1.55   0.122    -.0336357    .0039848
        _cons |    .686734   .0039721   172.89   0.000     .6789456    .6945224
-------------------------------------------------------------------------------

. postclose `mem2'

. use "`c(tmpdir)'/ind_reg.dta", clear

. export excel using "$OUT_XLSX", sheet("Ind_Reg") firstrow(variables) sheetrepl
> ace
file output/tables/BF_tables.xlsx saved

. 
. * C) Weighted regressions (if weight exists)
. cap confirm var $WGT

. if _rc exit

end of do-file


. 
. do "code/09_heterogeneity.do"

. *******************************************************
. * 09_heterogeneity.do — Modality interactions (Table 5)
. * - For each indicator y in (FCS rCSI HHS + optional others), run:
. *   y = α + β Phone + γ (X) + δ (Phone×X) + controls + e
. * - Outputs: Hete_Reg (unweighted) and Hete_Reg_wt (weighted, if $WGT)
. *******************************************************
. version 17

. set more off

. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. capture confirm var $MODE

. if _rc {
.     di as err "09_heterogeneity: MODE not found. Skipping."
.     exit
. }

. label values $MODE modlbl

. 
. * Indicators set
. local indlist

. foreach v in FCS rCSI HHS {
  2.     cap confirm var `v'
  3.     if !_rc local indlist `indlist' `v'
  4. }

. foreach v in $LCS_CRI_VAR $FES_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local indlist `indlist' `v'
  5. }

. if "`indlist'"=="" exit

. 
. * Heterogeneity variables
. local hetes

. foreach h of global HETE_VARS {
  2.     cap confirm var `h'
  3.     if !_rc local hetes `hetes' `h'
  4. }

. if "`hetes'"=="" {
.     di as txt "09_heterogeneity: No HETE_VARS found. Skipping."
09_heterogeneity: No HETE_VARS found. Skipping.
.     exit

end of do-file


. 
. do "code/10_quality_checks.do"

. *******************************************************
. * 10_quality_checks.do — Data quality (nonresponse)
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. cap confirm var $MODE

. if _rc exit

. label values $MODE modlbl

. 
. * Variables to check
. local qvars

. foreach v in FCS rCSI HHS $FES_VAR $LCS_CRI_VAR $INC_SRC_VAR $INC_CHG_VAR {
  2.     if "`v'"=="" continue
  3.     cap confirm var `v'
  4.     if !_rc local qvars `qvars' `v'
  5. }

. if "`qvars'"=="" exit

. 
. preserve

. tempname mem

. postfile `mem' str30 varname double miss_f2f miss_ph using ///
>     "`c(tmpdir)'/q_miss.dta", replace

. foreach v of local qvars {
  2.     quietly mean miss = missing(`v'), over($MODE)
  3.     matrix M = r(table)
  4.     scalar s0 = M[1,1]
  5.     scalar s1 = M[1,2]
  6.     local m0 = scalar(s0)
  7.     local m1 = scalar(s1)
  8.     post `mem' ("`v'") (100*`m0') (100*`m1')
  9. }
invalid syntax
r(198);

end of do-file

r(198);

. 
. do "code/11_enumerator_robustness.do"

. *******************************************************
. * 11_enumerator_robustness.do — Enumerator FE & LOEO
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. cap confirm var $MODE

. if _rc exit

. label values $MODE modlbl

. 
. cap confirm var $ENUM_ID

. if _rc exit

end of do-file


. 
. do "code/12_module_length.do"

. *******************************************************
. * 12_module_length.do — Short vs Long (F2F only)
. *******************************************************
. version 17

. set more off

. 
. use "$IN_FOR_TABLES", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. cap confirm var $MODE

. if _rc exit

. keep if $MODE==0
(1,019 observations deleted)

. 
. * Variables (edit in 00_config; these default names are placeholders)
. * globals expected: FCS_LONG, FCS_SHORT, FES_LONG, FES_SHORT, HHID
. local HHID "$HHID"

. 
. foreach p in FCS FES {
  2.     local L : global `p'_LONG
  3.     local S : global `p'_SHORT
  4.     if "`L'"=="" | "`S'"=="" continue
  5.     cap confirm var `L'
  6.     cap confirm var `S'
  7.     if _rc continue
  8. 
.     preserve
  9.     local paired 0
 10.     if "`HHID'"!="" {
 11.         cap confirm var `HHID'
 12.         if !_rc {
 13.             bysort `HHID': gen byte __both = !missing(`L') & !missing(`S')
 14.             count if __both==1
 15.             if r(N)>0 local paired 1
 16.         }
 17.     }
 18. 
.     tempname mem
 19.     postfile `mem' str10 metric double mean_long mean_short diff tstat pval
>  using ///
>         "`c(tmpdir)'/ml_`p'.dta", replace
 20. 
.     if `paired' {
 21.         keep if __both==1
 22.         quietly summarize `L'; local ml = r(mean)
 23.         quietly summarize `S'; local ms = r(mean)
 24.         quietly ttest `L' = `S'
 25.         post `mem' ("`p'") (`ml') (`ms') (`ml'-`ms') (r(t)) (r(p))
 26.     }
 27.     else {
 28.         quietly summarize `L'; local ml = r(mean)
 29.         quietly summarize `S'; local ms = r(mean)
 30.         quietly ttest `L' == `S'
 31.         post `mem' ("`p'") (`ml') (`ms') (`ml'-`ms') (r(t)) (r(p))
 32.     }
 33.     postclose `mem'
 34.     use "`c(tmpdir)'/ml_`p'.dta", clear
 35.     export excel using "$OUT_XLSX", sheet("ModuleLen_`p'") firstrow(variabl
> es) sheetreplace
 36.     restore
 37.     cap drop __both
 38. }
global not allowed
r(101);

end of do-file

r(101);

. 
. do "code/13_lcs_variants.do"
file code/13_lcs_variants.do not found
r(601);

. do "code/06_balance.do"

. *******************************************************
. * 06_balance.do — Baseline balance by modality (Tbls 20–22)
. * Requires in 00_config.do:
. *   - global MODE       (e.g., "Modality_Type", 0=F2F 1=Remote)
. *   - global BAL_VARS   (space-separated baseline vars)
. *   - global LISTING_IN (path) or will fall back to $IN_ANALYTIC
. *   - global OUT_XLSX   (workbook path)
. * Optional:
. *   - global WGT        (pweight var) to add weighted panel
. *   - global CLUSTVAR   (cluster id) for weighted SEs
. *******************************************************
. version 17

. set more off

. 
. * --- 1) Pick dataset (listing preferred) ---
. capture confirm file "$LISTING_IN"

. if _rc     use "$IN_ANALYTIC", clear
(File created by user 'appuser' at Fri Oct 11 09:14:10 2024)

. else       use "$LISTING_IN",  clear

. 
. * --- 2) Guard: modality available? ---
. capture confirm var $MODE

. if _rc {
.     di as err "06_balance: MODE ($MODE) not found. Set it in 00_config.do."
.     exit 498
. }

. label values $MODE modlbl

. 
. * --- 3) Collect baseline variables that exist ---
. local basevars

. foreach v of global BAL_VARS {
  2.     cap confirm var `v'
  3.     if !_rc local basevars `basevars' `v'
  4. }

. if "`basevars'"=="" {
.     di as err "06_balance: None of BAL_VARS found in this dataset."
06_balance: None of BAL_VARS found in this dataset.
.     di as txt "Tip: open 00_config.do and set BAL_VARS to the actual names."
Tip: open 00_config.do and set BAL_VARS to the actual names.
.     exit 459
r(459);
. }
r(459);

end of do-file

r(459);

. exit, clear
